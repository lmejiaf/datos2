/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Source;

import java.util.LinkedList;
import java.util.Queue;
import javax.swing.DefaultListModel;

/**
 *
 * @author lmejiaf
 */
public class Frame extends javax.swing.JFrame {

    Nodo raizArbol;
    int alturaAnterior = 0;

    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
        listOptions.setModel(new DefaultListModel());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nombreIntegrante = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nombrePadre = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        listOptions = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        lienzo = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setLabelFor(nombreIntegrante);
        jLabel1.setText("Nombre del nuevo integrante");

        jButton1.setText("Insertar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre del padre");

        listOptions.setModel(new DefaultListModel());
        listOptions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(listOptions);

        jButton2.setText("Aceptar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("ver");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nombreIntegrante, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nombrePadre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nombrePadre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nombreIntegrante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        lienzo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lienzoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout lienzoLayout = new javax.swing.GroupLayout(lienzo);
        lienzo.setLayout(lienzoLayout);
        lienzoLayout.setHorizontalGroup(
            lienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        lienzoLayout.setVerticalGroup(
            lienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 488, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lienzo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lienzo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
    }//GEN-LAST:event_formMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        listOptions.setModel(new DefaultListModel());
        String nombreP = nombrePadre.getText();
        String nombreH = nombreIntegrante.getText();

        if (!nombreP.isEmpty() && nombreH.isEmpty()) {
            nombreP = nombreP.trim();
            if (raizArbol == null) {
                Nodo nuevo = new Nodo(lienzo, nombreP);

                raizArbol = nuevo;

            }
        } else if (!nombreP.isEmpty() && !nombreH.isEmpty()) {
            nombreP = nombreP.trim();
            nombreH = nombreH.trim();
            LinkedList<Nodo> padres = buscarPadresPorNombre(nombreP, raizArbol);

            if (padres.size() == 1) {

                Nodo p = padres.getFirst();
                Nodo h = new Nodo(lienzo, nombreH);
                if (p.getDerecho() == null) {
                    p.setDerecho(h);
                    p.asignarPosHijos();
//                    h.graficar();
                    int nuevaAltura = getAltura(raizArbol);
                    if (alturaAnterior != nuevaAltura) {
                        redibujar(raizArbol);
                        alturaAnterior = nuevaAltura;
                    }
                } else if (p.getIzquierdo() == null) {
                    p.setIzquierdo(h);
                    p.asignarPosHijos();
//                    h.graficar();
                } else {
                    System.out.println("No se pudo insertar el integrante a este padre");
                }
            } else {
                if (!padres.isEmpty()) {
                    DefaultListModel<Nodo> modelo = new DefaultListModel();
                    padres.forEach((padre) -> {
                        //meter en la lista 
                        modelo.addElement(padre);
                        padre.iluminar();

//                            modelo.addElement();
                    });
                    listOptions.setModel(modelo);

                }

            }
        }
        redibujar(raizArbol);


    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowOpened

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowStateChanged

    private void lienzoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienzoMouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_lienzoMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultListModel<Nodo> modelo = new DefaultListModel();

        String nombreH = nombreIntegrante.getText();
        if (!nombreH.isEmpty()) {
            nombreH = nombreH.trim();
            Nodo p = listOptions.getSelectedValue();
            Nodo h = new Nodo(lienzo, nombreH);
            if (p != null) {

                if (p.getDerecho() == null) {
                    p.setDerecho(h);
                    p.asignarPosHijos();

                } else if (p.getIzquierdo() == null) {
                    p.setIzquierdo(h);
                    p.asignarPosHijos();

                } else {
                    System.out.println("No se pudo insertar el integrante a este padre");
                }
            }

            for (int i = 0; i < modelo.size(); i++) {
                modelo.get(i).desiluminar();
            }
        }

        modelo.clear();
        listOptions.setModel(modelo);
        nombrePadre.setText("");
        nombreIntegrante.setText("");
        redibujar(raizArbol);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        redibujar(raizArbol);
        Nodo p = listOptions.getSelectedValue();
        if (p != null) {
            p.iluminar2();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
                redibujar(raizArbol);

    }//GEN-LAST:event_formWindowGainedFocus

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formWindowDeactivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel lienzo;
    private javax.swing.JList<Nodo> listOptions;
    private javax.swing.JTextField nombreIntegrante;
    private javax.swing.JTextField nombrePadre;
    // End of variables declaration//GEN-END:variables

    public void redibujar(Nodo raiz) {
        limpiar();

        int altura = getAltura(raiz);
        if (raiz != null) {

            Queue<Nodo> cola = new LinkedList();
            cola.add(raiz);
            Nodo n;
            int nivel = 0;
            while (!cola.isEmpty()) {

                n = cola.poll();
                //accion, la que sea
                n.cambiarFactorExpansion(altura, nivel);
                n.asignarPosHijos();
                n.graficar();
                //fin accion
                if (n.getIzquierdo() != null) {
                    nivel++;
                    cola.add(n.getIzquierdo());
                }
                if (n.getDerecho() != null) {
                    nivel++;
                    cola.add(n.getDerecho());
                }

            }

        }

    }

    public LinkedList buscarPadresPorNombre(String nombre, Nodo raiz) {
        LinkedList<Nodo> listadepadres = new LinkedList();

        if (raiz != null) {

            Queue<Nodo> cola = new LinkedList();
            cola.add(raiz);
            Nodo n;
            int nivel = 0;
            while (!cola.isEmpty()) {

                n = cola.poll();
                //accion, la que sea
                if (n.getNombre().equalsIgnoreCase(nombre)) {

                    listadepadres.add(n);

                }
                //fin accion
                if (n.getIzquierdo() != null) {
                    nivel++;
                    cola.add(n.getIzquierdo());
                }
                if (n.getDerecho() != null) {
                    nivel++;
                    cola.add(n.getDerecho());
                }

            }
        }
        return listadepadres;
    }

// para el redibujado
    public void limpiar() {
        lienzo.getGraphics().clearRect(0, 0, lienzo.getWidth(), lienzo.getHeight());
    }

    public void redibujar(Nodo raiz, int altura) {
        limpiar();
        Queue<Nodo> cola = new LinkedList();
        cola.add(raiz);
        Nodo n;
        int nivel = 0;
        while (!cola.isEmpty()) {

            n = cola.poll();
            //accion, la que sea

            //fin accion
            if (n.getIzquierdo() != null) {
                nivel++;
                cola.add(n.getIzquierdo());
            }
            if (n.getDerecho() != null) {
                nivel++;
                cola.add(n.getDerecho());
            }

        }

    }

    public int getAltura(Nodo raiz) {
        if (raiz == null) {
            return -1;
        } else {
            return (1 + Math.max(getAltura(raiz.getIzquierdo()), getAltura(raiz.getDerecho())));
        }

    }

    public void aa() {

    }

}
